from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from flask import Flask
import threading
import os

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
web_app = Flask("")

@web_app.route("/")
def home():
    return "Bot is running!"

def run_web():
    port = int(os.environ.get("PORT", 5000))
    web_app.run(host="0.0.0.0", port=port)

threading.Thread(target=run_web).start()  # –∑–∞–ø—É—Å–∫–∞–µ–º Flask –æ—Ç–¥–µ–ª—å–Ω–æ

# Telegram –±–æ—Ç
users_waiting = []
active_chats = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /search —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    if user_id in active_chats:
        await update.message.reply_text("–¢—ã —É–∂–µ –≤ —á–∞—Ç–µ. –ù–∞–ø–∏—à–∏ /stop —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")
        return
    if users_waiting:
        partner_id = users_waiting.pop(0)
        active_chats[user_id] = partner_id
        active_chats[partner_id] = user_id
        await context.bot.send_message(chat_id=user_id, text="‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫ –Ω–∞–π–¥–µ–Ω!")
        await context.bot.send_message(chat_id=partner_id, text="‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫ –Ω–∞–π–¥–µ–Ω!")
    else:
        users_waiting.append(user_id)
        await update.message.reply_text("‚è≥ –ò—â–µ–º –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    if user_id in active_chats:
        partner_id = active_chats.pop(user_id)
        active_chats.pop(partner_id, None)
        await context.bot.send_message(chat_id=partner_id, text="‚ùó –ü–æ–¥–ø–∏—Å—á–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.")
        await update.message.reply_text("üîö –¢—ã –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.")
    elif user_id in users_waiting:
        users_waiting.remove(user_id)
        await update.message.reply_text("‚ùå –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await update.message.reply_text("–¢—ã –Ω–µ –≤ —á–∞—Ç–µ.")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        await context.bot.send_message(chat_id=partner_id, text=update.message.text)
    else:
        await update.message.reply_text("üîç –ù–∞–ø–∏—à–∏ /search —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.")

# –°–æ–∑–¥–∞—ë–º Telegram Application
app_bot = Application.builder().token("8145266061:AAGK1SJVbSJiK3HTXMIJBm1ZLEAJlbtQKGc").build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
app_bot.add_handler(CommandHandler("start", start))
app_bot.add_handler(CommandHandler("search", search))
app_bot.add_handler(CommandHandler("stop", stop))
app_bot.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

# –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_bot():
    app_bot.run_polling()

threading.Thread(target=run_bot).start()
